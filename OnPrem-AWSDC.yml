#basically this template almost same as OnPrem2.yml, but added prerfix OnPrem in front of variables
Description:
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an Internet Gateway, with a default
  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  OnPremEnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: OnPREM

  OnPremVpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.100.0.0/16

  OnPremPublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.100.1.0/24

  OnPremPublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.100.2.0/24

  OnPremPrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.100.101.0/24

  OnPremPrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.100.102.0/24

  AWSDCEnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: AWSDC

  AWSDCVpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.200.0.0/16

  AWSDCPublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.200.1.0/24

  AWSDCPublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.200.2.0/24

  AWSDCPrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.200.101.0/24

  AWSDCPrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.200.102.0/24

  KeyName:
    Description: EC2 key pair name for Oracle Server
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  OnPremVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref OnPremVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref OnPremEnvironmentName

  OnPremInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref OnPremEnvironmentName

  OnPremInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref OnPremInternetGateway
      VpcId: !Ref OnPremVPC

  OnPremPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref OnPremVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref OnPremPublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${OnPremEnvironmentName} Public Subnet (AZ1)

  OnPremPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref OnPremVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref OnPremPublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${OnPremEnvironmentName} Public Subnet (AZ2)

  OnPremPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref OnPremVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref OnPremPrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${OnPremEnvironmentName} Private Subnet (AZ1)

  OnPremPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref OnPremVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref OnPremPrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${OnPremEnvironmentName} Private Subnet (AZ2)

  OnPremNatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: OnPremInternetGatewayAttachment
    Properties:
      Domain: vpc

  OnPremNatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: OnPremInternetGatewayAttachment
    Properties:
      Domain: vpc

  OnPremNatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt OnPremNatGateway1EIP.AllocationId
      SubnetId: !Ref OnPremPublicSubnet1

  OnPremNatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt OnPremNatGateway2EIP.AllocationId
      SubnetId: !Ref OnPremPublicSubnet2

  OnPremPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref OnPremVPC
      Tags:
        - Key: Name
          Value: !Sub ${OnPremEnvironmentName} Public Routes

  OnPremDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: OnPremInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref OnPremPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref OnPremInternetGateway

  OnPremPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref OnPremPublicRouteTable
      SubnetId: !Ref OnPremPublicSubnet1

  OnPremPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref OnPremPublicRouteTable
      SubnetId: !Ref OnPremPublicSubnet2

  OnPremPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref OnPremVPC
      Tags:
        - Key: Name
          Value: !Sub ${OnPremEnvironmentName} Private Routes (AZ1)

  OnPremDefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref OnPremPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref OnPremNatGateway1

  OnPremPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref OnPremPrivateRouteTable1
      SubnetId: !Ref OnPremPrivateSubnet1

  OnPremPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref OnPremVPC
      Tags:
        - Key: Name
          Value: !Sub ${OnPremEnvironmentName} Private Routes (AZ2)

  OnPremDefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref OnPremPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref OnPremNatGateway2

  OnPremPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref OnPremPrivateRouteTable2
      SubnetId: !Ref OnPremPrivateSubnet2

  OnPremNoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref OnPremVPC

  OnPremEC2SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: "/"
      RoleName: OnPremEC2SSMRole

  OnPremOracleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref OnPremEC2SSMRole

  OnPremTomcatProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref OnPremEC2SSMRole

  OnPremWindowsProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref OnPremEC2SSMRole

  OnPremOracleSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the Oracle Server
      VpcId: !Ref OnPremVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 22
          FromPort: 22
        - CidrIp: !Ref OnPremVpcCIDR
          IpProtocol: tcp
          ToPort: 1521
          FromPort: 1521
        - CidrIp: 10.200.0.0/16
          IpProtocol: tcp
          ToPort: 1521
          FromPort: 1521
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-OracleSecurityGroup"

  OnPremOracleNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref OnPremPrivateSubnet1
      GroupSet:
        - !Ref OnPremOracleSecurityGroup
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-OracleENI"
    DependsOn: OnPremPrivateSubnet1RouteTableAssociation

  OnPremOracleOnPremInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m4.xlarge
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref OnPremOracleProfile
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref OnPremOracleNetworkInterface
          DeviceIndex: 0
      ImageId: ami-013ad504e4fcbb4d8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-OracleOnPrem"
    DependsOn: OnPremOracleNetworkInterface

  OnPremTomcatSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the Tomcat Server
      VpcId: !Ref OnPremVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 22
          FromPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 8080
          FromPort: 8080
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TomcatSecurityGroup"

  OnPremTomcatNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref OnPremPublicSubnet1
      GroupSet:
        - !Ref OnPremTomcatSecurityGroup
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TomcatENI"
    DependsOn: OnPremPublicSubnet1RouteTableAssociation

  OnPremTomcatOnPremInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m4.xlarge
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref OnPremTomcatProfile
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref OnPremTomcatNetworkInterface
          DeviceIndex: 0
      ImageId: ami-0ebbe1f22ae2f47d1
      Tags:
        - Key: Name
          Value: !Sub "OnPremTomcat"
    DependsOn: OnPremTomcatNetworkInterface

  OnPremWindowsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the Windows Server
      VpcId: !Ref OnPremVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 3389
          FromPort: 3389
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WindowsSecurityGroup"

  OnPremWindowsNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref OnPremPublicSubnet1
      GroupSet:
        - !Ref OnPremWindowsSecurityGroup
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WindowsENI"
    DependsOn: OnPremPublicSubnet1RouteTableAssociation

  OnPremWindowsOnPremInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m4.xlarge
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref OnPremWindowsProfile
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref OnPremWindowsNetworkInterface
          DeviceIndex: 0
      ImageId: ami-02e78fb759d303bf6
      Tags:
        - Key: Name
          Value: !Sub "OnPremWindowsServer"
    DependsOn: OnPremWindowsNetworkInterface

Outputs:
  OnPremVPC:
    Description: A reference to the created VPC
    Value: !Ref OnPremVPC

  OnPremPublicSubnets:
    Description: A list of the public subnets
    Value: !Join [",", [!Ref OnPremPublicSubnet1, !Ref OnPremPublicSubnet2]]

  OnPremPrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [",", [!Ref OnPremPrivateSubnet1, !Ref OnPremPrivateSubnet2]]

  OnPremPublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref OnPremPublicSubnet1

  OnPremPublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref OnPremPublicSubnet2

  OnPremPrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref OnPremPrivateSubnet1

  OnPremPrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref OnPremPrivateSubnet2

  OnPremOraclePrivateIP:
    Description: Oracle Private IP
    Value: !GetAtt OnPremOracleNetworkInterface.PrimaryPrivateIpAddress

  OnPremTomcatPublicIP:
    Description: Tomat Public IP
    Value: !GetAtt OnPremTomcatOnPremInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-TomcatPublicIp"

  OnPremWindowsPublicIP:
    Description: Windows Server Public IP
    Value: !GetAtt OnPremWindowsOnPremInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-WindowsServerPublicIp"
